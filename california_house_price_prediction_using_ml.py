# -*- coding: utf-8 -*-
"""California House Price Prediction using ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12hMeVi9G5xu-07QMuNK4msQV37NIKMcQ

Importing the Dependecies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""Importing Data"""

house_price_dataset = fetch_california_housing()

print (house_price_dataset)

#Loading the data as Pandas Dataframe
house_price_dataframe = pd.DataFrame(house_price_dataset.data,columns = house_price_dataset.feature_names)

#print first 5 rows
house_price_dataframe.head(5)

#add target column(house price) to Dataframe
house_price_dataframe['Price'] = house_price_dataset.target

#print first 5 rows including price Column
house_price_dataframe.head(5)

house_price_dataframe = house_price_dataframe.drop(columns = 'target', axis = 1)

#chekcing number of rows and columns in Data Frame
house_price_dataframe.shape

#check for missiong values
house_price_dataframe.isnull().sum()

#get statistical measures of DataSet
house_price_dataframe.describe()

"""Understanding hte correlation between various features in Dataset

1.   Positive Correlation
2.   Negative Correlation

"""

correlation = house_price_dataframe.corr()

#constructing heat map to understand the correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws= {'size':8}, cmap='Reds')

"""Splitting the Data and Target(Price) #Data and Label Split"""

X = house_price_dataframe.drop(['Price'], axis=1)
Y = house_price_dataframe['Price']

print(X)
print(Y)

"""Spliting Dat ainto Train and Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)

print (X.shape,X_train.shape, X_test.shape)

"""Model Training


XGBoost Rergessor (because of small Dataset)
"""

#loading the model
model = XGBRegressor()

#Training model with X_train
model.fit (X_train, Y_train)

"""Evaluation

Prediction on Training Data
"""

#accuracy for prediction on training Data      #find Rsquruare etc #cannot use accuracy score for regression problems
training_data_prediction = model.predict(X_train)

print (training_data_prediction)

#R square error - regresison probem
score_1 = metrics.r2_score(Y_train, training_data_prediction)

#mean absolute error - regresison probem
score_2 = metrics.mean_absolute_error(Y_train, training_data_prediction)

print ('R squared error:', score_1)   #should be close to zero not large as 10
print ('Mean absolute errorr:', score_2)  #should be close to zero not large as 10

"""Prediction on Test Data"""

#accuracy for prediction on test Data      #find Rsquruare etc #cannot use accuracy score for regression problems
testing_data_prediction = model.predict(X_test)

#R square error - regresison probem
score_1 = metrics.r2_score(Y_test, testing_data_prediction)

#mean absolute error - regresison probem
score_2 = metrics.mean_absolute_error(Y_test, testing_data_prediction)

print ('R squared error:', score_1)   #should be close to zero not large as 10
print ('Mean absolute errorr:', score_2)  #should be close to zero not large as 10

"""Visulaze the actual prices and the Predicted Prices"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel('Actual prices')
plt.ylabel('Predicted prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

"""Making a Predictive sytem on house price"""

input_data = (0,8.3252,41.0,6.984126984126984,1.0238095238095237,322.0,2.5555555555555554,37.88,-122.23)

#change input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print ('The person is not diabetic')
else:
  print('The person is diabetic')